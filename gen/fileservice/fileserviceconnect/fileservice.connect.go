// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fileservice/fileservice.proto

package fileserviceconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	fileservice "github.com/satjinder/grpc-mediator-service/gen/fileservice"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// FileAPIName is the fully-qualified name of the FileAPI service.
	FileAPIName = "fileservice.FileAPI"
)

// FileAPIClient is a client for the fileservice.FileAPI service.
type FileAPIClient interface {
	GetJson(context.Context, *connect_go.Request[fileservice.GetJsonRequest]) (*connect_go.Response[fileservice.GetJsonResponse], error)
}

// NewFileAPIClient constructs a client for the fileservice.FileAPI service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFileAPIClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) FileAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &fileAPIClient{
		getJson: connect_go.NewClient[fileservice.GetJsonRequest, fileservice.GetJsonResponse](
			httpClient,
			baseURL+"/fileservice.FileAPI/GetJson",
			opts...,
		),
	}
}

// fileAPIClient implements FileAPIClient.
type fileAPIClient struct {
	getJson *connect_go.Client[fileservice.GetJsonRequest, fileservice.GetJsonResponse]
}

// GetJson calls fileservice.FileAPI.GetJson.
func (c *fileAPIClient) GetJson(ctx context.Context, req *connect_go.Request[fileservice.GetJsonRequest]) (*connect_go.Response[fileservice.GetJsonResponse], error) {
	return c.getJson.CallUnary(ctx, req)
}

// FileAPIHandler is an implementation of the fileservice.FileAPI service.
type FileAPIHandler interface {
	GetJson(context.Context, *connect_go.Request[fileservice.GetJsonRequest]) (*connect_go.Response[fileservice.GetJsonResponse], error)
}

// NewFileAPIHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFileAPIHandler(svc FileAPIHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/fileservice.FileAPI/GetJson", connect_go.NewUnaryHandler(
		"/fileservice.FileAPI/GetJson",
		svc.GetJson,
		opts...,
	))
	return "/fileservice.FileAPI/", mux
}

// UnimplementedFileAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedFileAPIHandler struct{}

func (UnimplementedFileAPIHandler) GetJson(context.Context, *connect_go.Request[fileservice.GetJsonRequest]) (*connect_go.Response[fileservice.GetJsonResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("fileservice.FileAPI.GetJson is not implemented"))
}
