// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: statsservice/stats.proto

package statsserviceconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	statsservice "github.com/satjinder/grpc-mediator-service/gen/statsservice"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// StatsAPIName is the fully-qualified name of the StatsAPI service.
	StatsAPIName = "stats.StatsAPI"
)

// StatsAPIClient is a client for the stats.StatsAPI service.
type StatsAPIClient interface {
	GetStats(context.Context, *connect_go.Request[statsservice.GetStatsRequest]) (*connect_go.Response[statsservice.GetStatsResponse], error)
}

// NewStatsAPIClient constructs a client for the stats.StatsAPI service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStatsAPIClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) StatsAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &statsAPIClient{
		getStats: connect_go.NewClient[statsservice.GetStatsRequest, statsservice.GetStatsResponse](
			httpClient,
			baseURL+"/stats.StatsAPI/GetStats",
			opts...,
		),
	}
}

// statsAPIClient implements StatsAPIClient.
type statsAPIClient struct {
	getStats *connect_go.Client[statsservice.GetStatsRequest, statsservice.GetStatsResponse]
}

// GetStats calls stats.StatsAPI.GetStats.
func (c *statsAPIClient) GetStats(ctx context.Context, req *connect_go.Request[statsservice.GetStatsRequest]) (*connect_go.Response[statsservice.GetStatsResponse], error) {
	return c.getStats.CallUnary(ctx, req)
}

// StatsAPIHandler is an implementation of the stats.StatsAPI service.
type StatsAPIHandler interface {
	GetStats(context.Context, *connect_go.Request[statsservice.GetStatsRequest]) (*connect_go.Response[statsservice.GetStatsResponse], error)
}

// NewStatsAPIHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStatsAPIHandler(svc StatsAPIHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/stats.StatsAPI/GetStats", connect_go.NewUnaryHandler(
		"/stats.StatsAPI/GetStats",
		svc.GetStats,
		opts...,
	))
	return "/stats.StatsAPI/", mux
}

// UnimplementedStatsAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedStatsAPIHandler struct{}

func (UnimplementedStatsAPIHandler) GetStats(context.Context, *connect_go.Request[statsservice.GetStatsRequest]) (*connect_go.Response[statsservice.GetStatsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("stats.StatsAPI.GetStats is not implemented"))
}
