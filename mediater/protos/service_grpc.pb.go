// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppointmentApiClient is the client API for AppointmentApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppointmentApiClient interface {
	ListBookings(ctx context.Context, in *ListBookingsRequest, opts ...grpc.CallOption) (*ListBookingsResponse, error)
}

type appointmentApiClient struct {
	cc grpc.ClientConnInterface
}

func NewAppointmentApiClient(cc grpc.ClientConnInterface) AppointmentApiClient {
	return &appointmentApiClient{cc}
}

func (c *appointmentApiClient) ListBookings(ctx context.Context, in *ListBookingsRequest, opts ...grpc.CallOption) (*ListBookingsResponse, error) {
	out := new(ListBookingsResponse)
	err := c.cc.Invoke(ctx, "/appointments.AppointmentApi/ListBookings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppointmentApiServer is the server API for AppointmentApi service.
// All implementations must embed UnimplementedAppointmentApiServer
// for forward compatibility
type AppointmentApiServer interface {
	ListBookings(context.Context, *ListBookingsRequest) (*ListBookingsResponse, error)
	mustEmbedUnimplementedAppointmentApiServer()
}

// UnimplementedAppointmentApiServer must be embedded to have forward compatible implementations.
type UnimplementedAppointmentApiServer struct {
}

func (UnimplementedAppointmentApiServer) ListBookings(context.Context, *ListBookingsRequest) (*ListBookingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBookings not implemented")
}
func (UnimplementedAppointmentApiServer) mustEmbedUnimplementedAppointmentApiServer() {}

// UnsafeAppointmentApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppointmentApiServer will
// result in compilation errors.
type UnsafeAppointmentApiServer interface {
	mustEmbedUnimplementedAppointmentApiServer()
}

func RegisterAppointmentApiServer(s grpc.ServiceRegistrar, srv AppointmentApiServer) {
	s.RegisterService(&AppointmentApi_ServiceDesc, srv)
}

func _AppointmentApi_ListBookings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBookingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentApiServer).ListBookings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointments.AppointmentApi/ListBookings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentApiServer).ListBookings(ctx, req.(*ListBookingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppointmentApi_ServiceDesc is the grpc.ServiceDesc for AppointmentApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppointmentApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appointments.AppointmentApi",
	HandlerType: (*AppointmentApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBookings",
			Handler:    _AppointmentApi_ListBookings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/service.proto",
}
